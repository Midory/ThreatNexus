package com.threatnexus.api.controller;

import com.threatnexus.api.model.Vulnerability;
import com.threatnexus.api.projection.VulnerabilityProjection;
import com.threatnexus.api.repository.VulnerabilityRepository;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/vulnerabilities")
public class VulnerabilityController {

    private final VulnerabilityRepository vulnerabilityRepository;

    public VulnerabilityController(VulnerabilityRepository vulnerabilityRepository) {
        this.vulnerabilityRepository = vulnerabilityRepository;
    }

    @GetMapping
    public List<VulnerabilityProjection> getAllVulnerabilities() {
        return vulnerabilityRepository.findAllVulnerabilitiesProjected();
    }

    // New endpoint: search for a vulnerability by its CVE ID
    @GetMapping("/{cveId}")
    public ResponseEntity<?> getVulnerabilityById(@PathVariable String cveId) {
        Optional<VulnerabilityProjection> vulnerabilityOptional = vulnerabilityRepository.findVulnerabilityProjectionByCveId(cveId);
        if (vulnerabilityOptional.isPresent()) {
            return ResponseEntity.ok(vulnerabilityOptional.get());
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body("Vulnerability with CVE ID " + cveId + " not found.");
        }
    }
}