// src/components/VulnerabilityDashboard.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  Container,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Button,
  TextField,
  ButtonGroup,
  Box,
  useMediaQuery,
  useTheme,
  Tooltip as MuiTooltip,
  FormControlLabel,
  Checkbox,
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

function VulnerabilityDashboard() {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [severityFilter, setSeverityFilter] = useState('All');
  const [onlyEnriched, setOnlyEnriched] = useState(false);
  const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8080';

  const theme = useTheme();
  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));
  const navigate = useNavigate();

  useEffect(() => {
    fetchVulnerabilities();
  }, [baseURL]);

  const fetchVulnerabilities = () => {
    axios
      .get(`${baseURL}/api/vulnerabilities`)
      .then((response) => setVulnerabilities(response.data))
      .catch((error) => console.error('Error fetching vulnerabilities:', error));
  };

  // Filter vulnerabilities based on search term, severity, and enrichment status.
  const filteredVulnerabilities = vulnerabilities.filter((vuln) => {
    const searchMatch =
      vuln.cveId.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (vuln.description && vuln.description.toLowerCase().includes(searchTerm.toLowerCase()));
    const severityMatch =
      severityFilter === 'All' ||
      (vuln.severity && vuln.severity.toLowerCase() === severityFilter.toLowerCase());
    const enrichedMatch = !onlyEnriched || (vuln.enrichedDetails && vuln.enrichedDetails.trim() !== '');
    return searchMatch && severityMatch && enrichedMatch;
  });

  // Handler for enrichment: calls backend enrichment API and refreshes vulnerability list.
  const handleEnrich = (cveId) => {
    axios
      .get(`${baseURL}/api/enrich/${cveId}`)
      .then((response) => {
        console.log('Enrichment successful for', cveId, response.data);
        fetchVulnerabilities();
      })
      .catch((error) => {
        console.error("Error enriching CVE:", error);
      });
  };

  return (
    <Container sx={{ mt: 4 }}>
      <Typography variant={isSmallScreen ? 'h5' : 'h4'} gutterBottom>
        ThreatNexus Vulnerability Dashboard
      </Typography>

      {/* Search input */}
      <Box mb={2}>
        <TextField
          label="Search Vulnerabilities"
          variant="outlined"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          fullWidth
          sx={{ backgroundColor: '#1c1c1c', borderRadius: 1 }}
        />
      </Box>

      {/* Filter controls */}
      <Box mb={2} display="flex" alignItems="center" justifyContent="space-between">
        <Box>
          <Typography variant="subtitle1" gutterBottom>
            Filter by Severity:
          </Typography>
          <ButtonGroup variant="outlined" aria-label="outlined button group">
            {['All', 'CRITICAL', 'HIGH', 'MEDIUM', 'LOW'].map((level) => (
              <Button
                key={level}
                variant={severityFilter === level ? 'contained' : 'outlined'}
                onClick={() => setSeverityFilter(level)}
              >
                {level}
              </Button>
            ))}
          </ButtonGroup>
        </Box>
        <FormControlLabel
          control={
            <Checkbox
              checked={onlyEnriched}
              onChange={(e) => setOnlyEnriched(e.target.checked)}
              color="primary"
            />
          }
          label="Only Enriched"
        />
      </Box>

      {/* Vulnerabilities Table */}
      <TableContainer component={Paper}>
        <Table size={isSmallScreen ? 'small' : 'medium'}>
          <TableHead>
            <TableRow>
              <TableCell>CVE ID</TableCell>
              <TableCell>Description</TableCell>
              <TableCell>Severity</TableCell>
              <TableCell>Published Date</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filteredVulnerabilities.map((vuln) => (
              <TableRow key={vuln.cveId} hover>
                <TableCell>{vuln.cveId}</TableCell>
                <TableCell>
                  <MuiTooltip title={vuln.description || 'No description'}>
                    <span>
                      {vuln.description && vuln.description.length > 100
                        ? vuln.description.substring(0, 100) + '...'
                        : vuln.description || 'N/A'}
                    </span>
                  </MuiTooltip>
                </TableCell>
                <TableCell>{vuln.severity || 'N/A'}</TableCell>
                <TableCell>{vuln.published || 'N/A'}</TableCell>
                <TableCell>
                  <Button variant="outlined" onClick={() => navigate(`/vulnerability/${vuln.cveId}`)}>
                    View Details
                  </Button>{' '}
                  {/* Only show the Enrich button if enrichment has not been done */}
                  {!vuln.enrichedDetails && (
                    <Button variant="outlined" onClick={() => handleEnrich(vuln.cveId)}>
                      Enrich
                    </Button>
                  )}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Container>
  );
}

export default VulnerabilityDashboard;
